#include "xgpio.h"          // Provides access to PB GPIO driver.
#include <stdio.h>          // xil_printf and so forth.
#include "platform.h"       // Enables caching and other system stuff.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
#define SECOND 100
#define DEBOUNCE 20
#define MINBTN 1
#define SECBTN 2
#define DOWNBTN 4
#define HOURBTN 8
#define UPBTN 16
#define MAX_HOUR 23
#define MAX_MIN 59
#define MAX_SEC 59

XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.
int currentButtonState, realButtonState;
int count2,debounceTimer, btnTimer;
int hour, min, sec;
int firstTime, btnHoldTimer;
// This is invoked in response to a timer interrupt.
void printTime(){
	if(hour < 10){
		xil_printf("0");
	}
	xil_printf("%d:", hour);
	if(min < 10){
		xil_printf("0");
	}
	xil_printf("%d:", min);
	if(sec < 10){
		xil_printf("0");
	}
	xil_printf("%d\n\r", sec);
}
int changeTime(int isHour, int inc, int value){
	if(isHour){
		if(inc){
			if(value == MAX_HOUR){
				return 0;
			}
			else{
				return value + 1;
			}
		}
		else{
			if(value == 0){
				return MAX_HOUR;
			}
			else{
				return value - 1;
			}
		}
	}
	else{	//if minute or second
		if(inc){
			if(value == MAX_MIN){
				return 0;
			}
			else{
				return value + 1;
			}
		}
		else{
			if(value == 0){
				return MAX_MIN;
			}
			else{
				return value - 1;
			}
		}
	}
}

void button_decoder() {
	int upFlag = 0;
	int downFlag = 0;
	if(realButtonState & UPBTN){	//up
		upFlag = 1;
	}
	else if(realButtonState & DOWNBTN){
		downFlag = 1;
	}
	if(realButtonState & HOURBTN){
		if(upFlag){
			print("changing hour up 1\n\r");
			hour = changeTime(1, upFlag, hour);
		}
		else if(downFlag){
			print("changing hour down 1\n\r");
			hour = changeTime(1, !downFlag, hour);
		}
	}
	if(realButtonState & MINBTN){
		if(upFlag){
			print("changing min up 1\n\r");
			min = changeTime(0, upFlag, min);
		}
		else if(downFlag){
			print("changing min down 1\n\r");
			min = changeTime(0, !downFlag, min);
		}
	}
	if(realButtonState & SECBTN){
		if(upFlag){
			print("changing sec up 1\n\r");
			sec = changeTime(0, upFlag, sec);
		}
		else if(downFlag){
			print("changing sec down 1\n\r");
			sec = changeTime(0, !downFlag, sec);
		}
	}
	realButtonState = 0;
}

// It does 2 things: 1) debounce switches, and 2) advances the time.
void timer_interrupt_handler() {
	if(debounceTimer == DEBOUNCE)
	{
		if(currentButtonState != 0){
			realButtonState = currentButtonState;
//			xil_printf("%d\n\r", realButtonState);
		}
//		else{
//			realButtonState = 0;
//		}
		debounceTimer = 0;
	}
	else{
		debounceTimer++;
	}

	if(realButtonState != 0){
//		if(firstTime)
//		{
//			print("decoding fist time...");
			button_decoder();
			firstTime = 0;
//		}
//		else{
//			if(btnHoldTimer == SECOND){
//				print("decoding...");
//				button_decoder();
//				if(realButtonState == 0)
//				{
//					btnHoldTimer = 0;
//					firstTime = 1;
//				}
//			}
//			else{
//				btnHoldTimer++;
//			}
//		}
	}
	else	//if btn == 0
	{
		if(count2 == SECOND){

			if(sec == MAX_SEC){
				sec = 0;
				if(min == MAX_MIN){
					min = 0;
					if(hour == MAX_HOUR){
						hour = 0;
					}
					else{
						hour++;
					}
				}
				else{
					min++;
				}
			}else{
				sec++;
			}
			count2 = 0;
			printTime();
		}
		else{
			count2++;
		}

	}
}

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
  // Clear the GPIO interrupt.
  XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
  currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
  debounceTimer = 0;
  // You need to do something here.
  XGpio_InterruptClear(&gpPB, 0xFFFFFFFF);            // Ack the PB interrupt.
  XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the FIT interrupt first.
	if (intc_status & XPAR_FIT_TIMER_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_FIT_TIMER_0_INTERRUPT_MASK);
		timer_interrupt_handler();
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
		pb_interrupt_handler();
	}
}

int main (void) {
    init_platform();
    // Initialize the GPIO peripherals.
    int success;
    print("hello world\n\r");
    success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
    // Set the push button peripheral to be inputs.
    XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
    // Enable the global GPIO interrupt for push buttons.
    XGpio_InterruptGlobalEnable(&gpPB);
    // Enable all interrupts in the push button peripheral.
    XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

    microblaze_register_handler(interrupt_handler_dispatcher, NULL);
    XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
    		(XPAR_FIT_TIMER_0_INTERRUPT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK));
    XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
    microblaze_enable_interrupts();

    currentButtonState = 0;
    realButtonState = 0;
    btnTimer = 0;
    count2 = 0;
    firstTime = 1;
    btnHoldTimer = 0;
    hour = 23;
    min = 59;
    sec = 45;

    while(1);  // Program never ends.

    cleanup_platform();

    return 0;
}
