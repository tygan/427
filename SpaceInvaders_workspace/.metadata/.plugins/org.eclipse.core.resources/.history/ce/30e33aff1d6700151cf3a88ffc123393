/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"
#include "shapes.h"
#define DEBUG
void print(char *str);

#define FRAME_BUFFER_ADDR 0xC1000000  // Starting location in DDR where we will store the images that we display.
#define MAX_SILLY_TIMER 10000000;

#define ALIEN_HEIGHT 16
#define ALIEN_WIDTH 24

#define NUM_ALIENS 11 * 32

#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 640
#define ALIENS_TALL 5
#define ALIENS_WIDE 11

#define WORD_WIDTH 32



void print_aliens(int corner_top, int corner_left){
	unsigned int * framePointer = (unsigned int *) FRAME_BUFFER_ADDR;
	//invert global bool aliens_in;
	int i;
	for(i=0; i<ALIENS_TALL; i++){
		int j;
		for(j=0; j<ALIENS_WIDE; j++){
			//if alien bool array of i and j
			//separate into rows 1, 2-3, 4-5
			//if aliens_in
			int row, column;
			for (row=corner_top+(i*ALIEN_HEIGHT); row<corner_top+(i+1)*ALIEN_HEIGHT; row++) {
				for (column = corner_left+(j*ALIEN_WIDTH); column<corner_left+(j+1)*ALIEN_HEIGHT; column++) {
					int q = (row-corner_top)/ALIEN_HEIGHT;
					int w = (column-corner_left)/ALIEN_WIDTH;
					//xil_printf("row - corner_top = %d; column - corner_left = %d\n\r",row-corner_top,column-corner_left);
					if ((alien_top_in_24x16[(row-corner_top)/(i*ALIEN_HEIGHT)] & (1<<(ALIEN_WIDTH-1-((column-corner_left)/(j*ALIEN_WIDTH)))))) {
						//xil_printf("!!!\n\r");
						framePointer[(row)*640 + (column)] = 0x0000FF00;
					}else{
						//xil_printf("***\n\r");
						framePointer[(row)*640 + (column)] = 0x00000000;
					}
				}
			}
		}
	}


}

int main()
{
	init_platform();                   // Necessary for all programs.
	int Status;                        // Keep track of success/failure of system function calls.
	XAxiVdma videoDMAController;
	// There are 3 steps to initializing the vdma driver and IP.
	// Step 1: lookup the memory structure that is used to access the vdma driver.
    XAxiVdma_Config * VideoDMAConfig = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
    // Step 2: Initialize the memory structure and the hardware.
    if(XST_FAILURE == XAxiVdma_CfgInitialize(&videoDMAController, VideoDMAConfig,	XPAR_AXI_VDMA_0_BASEADDR)) {
    	xil_printf("VideoDMA Did not initialize.\r\n");
    }
    // Step 3: (optional) set the frame store number.
    if(XST_FAILURE ==  XAxiVdma_SetFrmStore(&videoDMAController, 2, XAXIVDMA_READ)) {
    	xil_printf("Set Frame Store Failed.");
    }
    // Initialization is complete at this point.

    // Setup the frame counter. We want two read frames. We don't need any write frames but the
    // function generates an error if you set the write frame count to 0. We set it to 2
    // but ignore it because we don't need a write channel at all.
    XAxiVdma_FrameCounter myFrameConfig;
    myFrameConfig.ReadFrameCount = 2;
    myFrameConfig.ReadDelayTimerCount = 10;
    myFrameConfig.WriteFrameCount =2;
    myFrameConfig.WriteDelayTimerCount = 10;
    Status = XAxiVdma_SetFrameCounter(&videoDMAController, &myFrameConfig);
    if (Status != XST_SUCCESS) {
	   xil_printf("Set frame counter failed %d\r\n", Status);
	   if(Status == XST_VDMA_MISMATCH_ERROR)
		   xil_printf("DMA Mismatch Error\r\n");
    }
    // Now we tell the driver about the geometry of our frame buffer and a few other things.
    // Our image is 480 x 640.
    XAxiVdma_DmaSetup myFrameBuffer;
    myFrameBuffer.VertSizeInput = 480;    // 480 vertical pixels.
    myFrameBuffer.HoriSizeInput = 640*4;  // 640 horizontal (32-bit pixels).
    myFrameBuffer.Stride = 640*4;         // Dont' worry about the rest of the values.
    myFrameBuffer.FrameDelay = 0;
    myFrameBuffer.EnableCircularBuf=1;
    myFrameBuffer.EnableSync = 0;
    myFrameBuffer.PointNum = 0;
    myFrameBuffer.EnableFrameCounter = 0;
    myFrameBuffer.FixedFrameStoreAddr = 0;
    if(XST_FAILURE == XAxiVdma_DmaConfig(&videoDMAController, XAXIVDMA_READ, &myFrameBuffer)) {
    	xil_printf("DMA Config Failed\r\n");
     }
    // We need to give the frame buffer pointers to the memory that it will use. This memory
    // is where you will write your video data. The vdma IP/driver then streams it to the HDMI
    // IP.
     myFrameBuffer.FrameStoreStartAddr[0] = FRAME_BUFFER_ADDR;
     myFrameBuffer.FrameStoreStartAddr[1] = FRAME_BUFFER_ADDR + 4*640*480;

     if(XST_FAILURE == XAxiVdma_DmaSetBufferAddr(&videoDMAController, XAXIVDMA_READ,
    		               myFrameBuffer.FrameStoreStartAddr)) {
    	 xil_printf("DMA Set Address Failed Failed\r\n");
     }
     // Print a sanity message if you get this far.
     xil_printf("Woohooz! I made it through initialization.\n\r");
     // Now, let's get ready to start displaying some stuff on the screen.
     // The variables framePointer and framePointer1 are just pointers to the base address
     // of frame 0 and frame 1.
//     unsigned int * framePointer0 = (unsigned int *) FRAME_BUFFER_0_ADDR;
//     unsigned int * framePointer1 = ((unsigned int *) FRAME_BUFFER_0_ADDR) + 640*480;


    // Let's print out the alien as ASCII characters on the screen.
	// Each line of the alien is a 32-bit integer. We just need to strip the bits out and send
	// them to stdout.
	// MSB is the left-most pixel for the alien, so start from the MSB as we print from left to right.

     unsigned int * framePointer = (unsigned int *) FRAME_BUFFER_ADDR;

     int corner_left = 20;
     int corner_top = 20;

     print_aliens(corner_top, corner_left);

//     int row, column;
//
//     for (row=top_corner; row<top_corner+ALIEN_HEIGHT; row++) {
//     		for (column = left_corner; column<left_corner+ALIEN_WIDTH; column++) {
//				if ((alien_top_in_24x16[row-top_corner] & (1<<(ALIEN_WIDTH-1-(column-left_corner))))) {
//					framePointer[(row)*640 + (column)] = 0x0000FF00;
//				}else{
//					framePointer[(row)*640 + (column)] = 0x00000000;
//				}
//          	}
//          }


//     // This tells the HDMI controller the resolution of your display (there must be a better way to do this).
     XIo_Out32(XPAR_AXI_HDMI_0_BASEADDR, 640*480);
//
//     // Start the DMA for the read channel only.
     if(XST_FAILURE == XAxiVdma_DmaStart(&videoDMAController, XAXIVDMA_READ)){
    	 xil_printf("DMA START FAILED\r\n");
     }
     int frameIndex = 0;
//     // We have two frames, let's park on frame 0. Use frameIndex to index them.
//     // Note that you have to start the DMA process before parking on a frame.
     if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
    	 xil_printf("vdma parking failed\n\r");
     }
//     // Oscillate between frame 0 and frame 1.
//     int sillyTimer = MAX_SILLY_TIMER;  // Just a cheap delay between frames.

     while (1) {

    	 char c = getchar();
    	 xil_printf("%d",(u_int)c);
    	 xil_printf("hi");
//    	 while (sillyTimer) sillyTimer--;    // Decrement the timer.
//    	 sillyTimer = MAX_SILLY_TIMER;       // Reset the timer.
//         frameIndex = (frameIndex + 1) % 2;  // Alternate between frame 0 and frame 1.
//         if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
//        	 xil_printf("vdma parking failed\n\r");
//         }
     }
     cleanup_platform();

    return 0;
}
